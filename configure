#!/usr/bin/perl
use warnings;
use strict;
use Data::Dumper;

sub flatten {
	# record = { id => 'ClassName', depends => [ 'OtherClass', 'NextClass' ] }
	my $Records = shift;
	my $Targets = shift;

	sub reducedag {
		my $Record = shift;
		my $Targets = shift;

		if ($Record->{dg_state} ne 'new') {
			return "ERROR: reducedag() is confused.  Possible circular dependency involving ".$Record->{id};
		}
		$Record->{dg_state} = 'open';

		foreach my $Dep (sort @{$Record->{dg_depends}}) {
			if ($Dep->{dg_state} eq 'open') {
				return sprintf("ERROR: Circular dependancies: %s depends on %s", $Record->{id}, $Dep->{id});
			}
			elsif ($Dep->{dg_state} eq 'closed') {
				next;
			}
			else {
				my $rv = reducedag($Dep, $Targets);
				return $rv if ($rv ne "OK");
			}
		}
		push @$Targets, $Record;
		$Record->{dg_state} = 'closed';
		return "OK";
	}

	my %AllRecs = map { ($_->{id}, $_) } @$Records;
	foreach my $Rec (@$Records) {
		$Rec->{dg_state} = 'new';
		$Rec->{dg_depends} = [];
		foreach my $Depend (@{$Rec->{depends}}) {
			return sprintf("Dependency %s of %s is not in the graph.", $Depend, $Rec->{id}) unless exists($AllRecs{$Depend});
			push @{$Rec->{dg_depends}}, $AllRecs{$Depend};
		}
	}

	my $rv = 'OK';
	foreach my $Rec (sort { $a->{id} cmp $b->{id} } @$Records) {
		if ($Rec->{dg_state} eq 'new') {
			my $rv = reducedag($Rec, $Targets);
			last if ($rv ne "OK");
		}
	}
	foreach my $Rec (@$Records) {
		delete $Rec->{dg_state};
		delete $Rec->{dg_depends};
	}
	return $rv;
}

#            #
# Card Index #
#            #

sub read_card_config {
	my $File = shift;
	my $Record = { id => $File, depends => [], config => '' };
	open(CARD, '<', $File) or die "Unable to open $File";
	local $_;
	while (<CARD>) {
		chomp;
		if (/^\/\*\* configure: sysmgr\.conf\.example/../\*\//) {
			next if /^\/\*\*/;
			next if /\*\//;
			$Record->{config} .= "$_\n";
		}
		if (/^\/\*\* configure: depends: (.+) \*\//) {
			push @{$Record->{depends}}, map { sprintf("cards/%s.cpp", $_) } split(/ /, $1);
		}
	}
	return $Record;
}

my @Records = map { read_card_config($_); } glob('cards/*.cpp');
my @Targets;
my $rv = flatten(\@Records, \@Targets);
die "Unable to flatten card dependency graph: $rv" if ($rv ne 'OK');

open(CONFTMPL, '<', 'sysmgr.conf.example.tmpl') or die "Cannot open sysmgr.conf.example.tmpl for reading";
open(CONF, '>', 'sysmgr.conf.example') or die "Cannot open sysmgr.conf.example for writing";
while (<CONFTMPL>) {
	chomp;
	if (/^# {MODULES}$/) {
		for my $Card (@Targets) {
			for my $CfgLine (split /[\r\n]+/, $Card->{config}) {
				printf CONF "# %s\n", $CfgLine;
			}
		}
	}
	else {
		printf CONF "%s\n", $_;
	}
}
close(CONFTMPL);
close(CONF);


#               #
# Command Index #
#               #

sub identify_class {
	my $File = shift;
	open(CPP, '<', $File) or die "Unable to open $File";
	local $_;
	while (<CPP>) {
		if (/^\s*class\s+(\S+)(?:\s*:\s+([^{]+))?(?:{|$)/) {
			close(CPP);
			return $1;
		}
	}
	close (CPP);
	return ();
}

my %CommandFiles = map { (identify_class($_), $_) } glob('commands/*.h');

open(I, '>', 'commandindex.inc') or die "Cannot open commandindex.inc for writing: $!";
for my $Command (sort keys %CommandFiles) {
	printf I "REGISTER_COMMAND(%s);\n", substr($Command, length('Command_'));
}
close(I);

open(H, '>', 'commandindex.h') or die "Cannot open commandindex.h for writing: $!";
for my $Command (sort keys %CommandFiles) {
	printf H "#include \"%s\"\n", $CommandFiles{$Command};
}
close(H);
